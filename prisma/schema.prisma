// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLogEntries {
  storeId   String?  @map("store_id")
  id        String   @id @default(cuid())
  payload   Json?    @db.Json
  createdAt DateTime @default(now()) @map("created_at")
  ipAddress String   @default("") @map("ip_address") @db.VarChar(64)

  @@index([storeId], map: "audit_logs_instance_id_idx")
  @@map("audit_log_entries")
}

enum Role {
  ADMIN
  STORE_ADMIN
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  Profile       Profile?
  role          Role           @default(STORE_ADMIN)
  Store         Store[]
  StoreBranch   StoreBranch[]
  Otp           Otp[]
  active        Boolean        @default(false)
  Files         File[]
  subscriptions Subscription[]

  @@map("user")
}

model Profile {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  nationalId String?   @unique @map("national_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("profile")
}

model Otp {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  identifier String // Email or phone
  otp        String
  token      String   @unique // Secure verification token
  type       OtpType
  expiresAt  DateTime
  used       Boolean  @default(false)
  attempts   Int      @default(0)
  createdAt  DateTime @default(now())

  @@index([identifier, type])
  @@index([token])
  @@map("otp")
}

enum OtpType {
  LOGIN
  PASSWORD_RESET
  SIGNUP
}

model StoreType {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Store     Store[]

  @@map("store_type")
}

model Store {
  id          String        @id @default(cuid())
  title       String
  active      Boolean?      @default(false)
  userId      String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  storeTypeId String
  user        User          @relation(fields: [userId], references: [id])
  storeType   StoreType     @relation(fields: [storeTypeId], references: [id])
  StoreBranch StoreBranch[]

  @@map("store")
}

model StoreBranch {
  id                      String                   @id @default(cuid())
  title                   String
  description             String                   @db.Text
  active                  Boolean?                 @default(false)
  menuPublished           Boolean                  @default(false) @map("menu_published")
  menuPublishedAt         DateTime?                @map("menu_published_at")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                @map("deleted_at")
  store                   Store                    @relation(fields: [storeId], references: [id])
  storeId                 String
  owner                   User                     @relation(fields: [userId], references: [id])
  Category                Category[]
  userId                  String
  branchMenuSubscriptions BranchMenuSubscription[]

  @@map("store_branch")
}

model Category {
  id          String @id @default(cuid())
  title       String
  icon        String
  description String @db.Text

  active        Boolean?    @default(false)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")
  branch        StoreBranch @relation(fields: [storeBranchId], references: [id])
  storeBranchId String
  Item          Item[]

  @@map("category")
}

model Item {
  id          String  @id @default(cuid())
  title       String
  icon        String
  description String  @db.Text
  price       Decimal @db.Decimal(10, 2) // Price field for menu items
  currency    String  @default("USD") // Currency for the price

  active     Boolean?  @default(false)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String

  // Many-to-many relationship with File for image gallery
  images ItemImage[]

  @@map("item")
}

// Junction table for Item and File relationship
model ItemImage {
  id        String   @id @default(cuid())
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  order     Int      @default(0) // For ordering images
  isPrimary Boolean  @default(false) // Primary image for the item
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([itemId, fileId])
  @@map("item_image")
}

model File {
  id          String    @id @default(cuid())
  name        String
  path        String // Local file system path or S3 key
  size        Int
  mimeType    String
  published   Boolean   @default(false)
  publishedAt DateTime?
  storageType String    @default("local") // 'local' or 's3'
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Many-to-many relationship with Item for image gallery
  itemImages ItemImage[]

  @@map("file")
}

// Subscription System Models

enum SubscriptionInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
  TRIAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

model SubscriptionPlan {
  id                String               @id @default(cuid())
  name              String
  nameFa            String?              @map("name_fa")
  description       String               @db.Text
  descriptionFa     String?              @map("description_fa") @db.Text
  price             Decimal              @db.Decimal(10, 2)
  currency          String               @default("IRR")
  interval          SubscriptionInterval
  features          Json
  active            Boolean              @default(true)
  isDefault         Boolean              @default(false) @map("is_default")
  maxStores         Int                  @default(1) @map("max_stores")
  maxBranches       Int                  @default(1) @map("max_branches")
  maxPublishedMenus Int                  @default(1) @map("max_published_menus")
  maxItems          Int                  @default(50) @map("max_items")
  maxImages         Int                  @default(100) @map("max_images")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  deletedAt         DateTime?            @map("deleted_at")

  subscriptions Subscription[]

  @@map("subscription_plan")
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String
  planId            String
  status            SubscriptionStatus
  startDate         DateTime           @map("start_date")
  endDate           DateTime           @map("end_date")
  trialEndDate      DateTime?          @map("trial_end_date")
  cancelAtPeriodEnd Boolean            @default(false) @map("cancel_at_period_end")
  paymentProvider   String             @map("payment_provider")
  paymentProviderId String?            @map("payment_provider_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  cancelledAt       DateTime?          @map("cancelled_at")

  user                    User                     @relation(fields: [userId], references: [id])
  plan                    SubscriptionPlan         @relation(fields: [planId], references: [id])
  payments                Payment[]
  branchMenuSubscriptions BranchMenuSubscription[]

  @@map("subscription")
}

model Payment {
  id                String        @id @default(cuid())
  subscriptionId    String
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("IRR")
  status            PaymentStatus
  paymentProvider   String        @map("payment_provider")
  paymentProviderId String?       @map("payment_provider_id")
  paymentMethod     String?       @map("payment_method")
  description       String?
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payment")
}

model BranchMenuSubscription {
  id             String   @id @default(cuid())
  storeBranchId  String   @map("store_branch_id")
  subscriptionId String
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  storeBranch  StoreBranch  @relation(fields: [storeBranchId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@unique([storeBranchId, subscriptionId])
  @@map("branch_menu_subscription")
}
